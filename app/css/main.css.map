{"version":3,"sources":["_sprites.scss","main.scss","../bower_components/susy/sass/susy/output/support/_rem.scss","../bower_components/susy/sass/susy/language/susy/_span.scss","../bower_components/susy/sass/susy/output/shared/_direction.scss","../bower_components/susy/sass/susy/language/susy/_gutters.scss"],"names":[],"mappings":"AAAA;;;;;;;;;;;;EAYE;AAoGF;;;;EAIE;AAWF;;;;;;;;;;;;;;;;;;;;;;;;;EAyBE;AA2BF;;;;;;;;;;;EAWE;AAmBF;;;;;EAKE;AAUF;;;;;EAKE;ACtMF;ED0IE,6CAAuB;EALvB,gCAlI+B;EAwH/B,aAxHsC;EA4HtC,cA5H6C,ECD9C;EDyKC;IC3KF;MD0IE,gDAAuB;MAyBvB,6BAhK2D,ECD5D,EAAA;;AAID;EClBI,iBCwIoB;EDxIpB,YEA4D;EFA5D,uBG4DwB,EJxC3B","file":"main.css","sourcesContent":["/*\nSCSS variables are information about icon's compiled state, stored under its original file name\n\n.icon-home {\n  width: $icon-home-width;\n}\n\nThe large array-like variables contain all information about a single icon\n$icon-home: x y offset_x offset_y width height total_width total_height image_path;\n\nAt the bottom of this section, we provide information about the spritesheet itself\n$spritesheet: width height image $spritesheet-sprites;\n*/\n$facebook-name: 'facebook';\n$facebook-x: 0px;\n$facebook-y: 120px;\n$facebook-offset-x: 0px;\n$facebook-offset-y: -120px;\n$facebook-width: 121px;\n$facebook-height: 120px;\n$facebook-total-width: 291px;\n$facebook-total-height: 240px;\n$facebook-image: '../images/sprites.png';\n$facebook: (0px, 120px, 0px, -120px, 121px, 120px, 291px, 240px, '../images/sprites.png', 'facebook', );\n$github-name: 'github';\n$github-x: 149px;\n$github-y: 0px;\n$github-offset-x: -149px;\n$github-offset-y: 0px;\n$github-width: 142px;\n$github-height: 120px;\n$github-total-width: 291px;\n$github-total-height: 240px;\n$github-image: '../images/sprites.png';\n$github: (149px, 0px, -149px, 0px, 142px, 120px, 291px, 240px, '../images/sprites.png', 'github', );\n$twitter-name: 'twitter';\n$twitter-x: 0px;\n$twitter-y: 0px;\n$twitter-offset-x: 0px;\n$twitter-offset-y: 0px;\n$twitter-width: 149px;\n$twitter-height: 120px;\n$twitter-total-width: 291px;\n$twitter-total-height: 240px;\n$twitter-image: '../images/sprites.png';\n$twitter: (0px, 0px, 0px, 0px, 149px, 120px, 291px, 240px, '../images/sprites.png', 'twitter', );\n$youtube-name: 'youtube';\n$youtube-x: 121px;\n$youtube-y: 120px;\n$youtube-offset-x: -121px;\n$youtube-offset-y: -120px;\n$youtube-width: 120px;\n$youtube-height: 120px;\n$youtube-total-width: 291px;\n$youtube-total-height: 240px;\n$youtube-image: '../images/sprites.png';\n$youtube: (121px, 120px, -121px, -120px, 120px, 120px, 291px, 240px, '../images/sprites.png', 'youtube', );\n$facebook-2x-name: 'facebook@2x';\n$facebook-2x-x: 0px;\n$facebook-2x-y: 240px;\n$facebook-2x-offset-x: 0px;\n$facebook-2x-offset-y: -240px;\n$facebook-2x-width: 242px;\n$facebook-2x-height: 240px;\n$facebook-2x-total-width: 582px;\n$facebook-2x-total-height: 480px;\n$facebook-2x-image: '../images/sprites@2x.png';\n$facebook-2x: (0px, 240px, 0px, -240px, 242px, 240px, 582px, 480px, '../images/sprites@2x.png', 'facebook@2x', );\n$github-2x-name: 'github@2x';\n$github-2x-x: 298px;\n$github-2x-y: 0px;\n$github-2x-offset-x: -298px;\n$github-2x-offset-y: 0px;\n$github-2x-width: 284px;\n$github-2x-height: 240px;\n$github-2x-total-width: 582px;\n$github-2x-total-height: 480px;\n$github-2x-image: '../images/sprites@2x.png';\n$github-2x: (298px, 0px, -298px, 0px, 284px, 240px, 582px, 480px, '../images/sprites@2x.png', 'github@2x', );\n$twitter-2x-name: 'twitter@2x';\n$twitter-2x-x: 0px;\n$twitter-2x-y: 0px;\n$twitter-2x-offset-x: 0px;\n$twitter-2x-offset-y: 0px;\n$twitter-2x-width: 298px;\n$twitter-2x-height: 240px;\n$twitter-2x-total-width: 582px;\n$twitter-2x-total-height: 480px;\n$twitter-2x-image: '../images/sprites@2x.png';\n$twitter-2x: (0px, 0px, 0px, 0px, 298px, 240px, 582px, 480px, '../images/sprites@2x.png', 'twitter@2x', );\n$youtube-2x-name: 'youtube@2x';\n$youtube-2x-x: 242px;\n$youtube-2x-y: 240px;\n$youtube-2x-offset-x: -242px;\n$youtube-2x-offset-y: -240px;\n$youtube-2x-width: 240px;\n$youtube-2x-height: 240px;\n$youtube-2x-total-width: 582px;\n$youtube-2x-total-height: 480px;\n$youtube-2x-image: '../images/sprites@2x.png';\n$youtube-2x: (242px, 240px, -242px, -240px, 240px, 240px, 582px, 480px, '../images/sprites@2x.png', 'youtube@2x', );\n$spritesheet-width: 291px;\n$spritesheet-height: 240px;\n$spritesheet-image: '../images/sprites.png';\n$spritesheet-sprites: ($facebook, $github, $twitter, $youtube, );\n$spritesheet: (291px, 240px, '../images/sprites.png', $spritesheet-sprites, );\n$retina-spritesheet-width: 582px;\n$retina-spritesheet-height: 480px;\n$retina-spritesheet-image: '../images/sprites@2x.png';\n$retina-spritesheet-sprites: ($facebook-2x, $github-2x, $twitter-2x, $youtube-2x, );\n$retina-spritesheet: (582px, 480px, '../images/sprites@2x.png', $retina-spritesheet-sprites, );\n\n/*\nThese \"retina group\" variables are mappings for the naming and pairing of normal and retina sprites.\n\nThe list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.\n*/\n$facebook-group-name: 'facebook';\n$facebook-group: ('facebook', $facebook, $facebook-2x, );\n$github-group-name: 'github';\n$github-group: ('github', $github, $github-2x, );\n$twitter-group-name: 'twitter';\n$twitter-group: ('twitter', $twitter, $twitter-2x, );\n$youtube-group-name: 'youtube';\n$youtube-group: ('youtube', $youtube, $youtube-2x, );\n$retina-groups: ($facebook-group, $github-group, $twitter-group, $youtube-group, );\n\n/*\nThe provided mixins are intended to be used with the array-like variables\n\n.icon-home {\n  @include sprite-width($icon-home);\n}\n\n.icon-email {\n  @include sprite($icon-email);\n}\n\nExample usage in HTML:\n\n`display: block` sprite:\n<div class=\"icon-home\"></div>\n\nTo change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n\n// CSS\n.icon {\n  display: inline-block;\n}\n\n// HTML\n<i class=\"icon icon-home\"></i>\n*/\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n/*\nThe `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.\n  It should be used with a \"retina group\" variable.\n\nThe media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/\n\n$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );\n\n.icon-home {\n  @include retina-sprite($icon-home-group);\n}\n*/\n@mixin sprite-background-size($sprite) {\n  $sprite-total-width: nth($sprite, 7);\n  $sprite-total-height: nth($sprite, 8);\n  background-size: $sprite-total-width $sprite-total-height;\n}\n\n@mixin retina-sprite($retina-group) {\n  $normal-sprite: nth($retina-group, 2);\n  $retina-sprite: nth($retina-group, 3);\n  @include sprite($normal-sprite);\n\n  @media (-webkit-min-device-pixel-ratio: 2),\n         (min-resolution: 192dpi) {\n    @include sprite-image($retina-sprite);\n    @include sprite-background-size($normal-sprite);\n  }\n}\n\n/*\nThe `sprites` mixin generates identical output to the CSS template\n  but can be overridden inside of SCSS\n\n@include sprites($spritesheet-sprites);\n*/\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n\n/*\nThe `retina-sprites` mixin generates a CSS rule and media query for retina groups\n  This yields the same output as CSS retina template but can be overridden in SCSS\n\n@include retina-sprites($retina-groups);\n*/\n@mixin retina-sprites($retina-groups) {\n  @each $retina-group in $retina-groups {\n    $sprite-name: nth($retina-group, 1);\n    .#{$sprite-name} {\n      @include retina-sprite($retina-group);\n    }\n  }\n}\n","// Settings\n@import 'settings.global';\n@import 'settings.colors';\n\n// Tools\n\n// Generic\n@import 'generic.normalize';\n@import 'generic.reset';\n@import 'generic.box-sizing';\n@import 'generic.fonts';\n\n// Elements\n@import 'elements.headings';\n@import 'elements.images';\n@import 'elements.links';\n@import 'elements.lists';\n@import 'elements.forms';\n\n// Objects\n@import 'objects.layout';\n@import 'objects.wrappers';\n\n// Components\n@import 'components.buttons';\n\n// Trumps / Helpers\n@import 'helpers.clearfix';\n\n// sprites\n@import 'sprites';\n.github {\n  @include retina-sprite($github-group);\n}\n\n// susy\n@import 'susy/sass/susy';\n.susy {\n  @include span(2);\n}\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n"]}